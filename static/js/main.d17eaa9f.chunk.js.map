{"version":3,"sources":["image/vector.ts","spaceengineers/surface.ts","image/color3.ts","spaceengineers/constants.ts","image/dither.ts","spaceengineers/process.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NewVector2","x","y","X","Y","Vector2Mul","a","v","NewTextSurface","surfaceName","textureSize","surfaceSize","fontSize","TextureSize","SurfaceSize","SufaceName","FontSize","NewTextSurfaceProvider","blockName","surfaceCount","BlockName","TextSurfaces","Array","StandardSize","Lcd","WideLcd","LargeCornerLcd","SmallCornerLcd","TextPanel","LargeProgrammableBlock","SmallProgrammableBlock","ConsoleBlock","FighterCockpit","LargeCockpit","SmallCockpit","LargeIndustrialCockpit","SmallIndustrialCockpit","LargeFlightSeat","LargeControlStation","TextSurfaceProviders","ProviderByName","forEach","provider","ColorAdd","b","R","G","B","A","ColorMul","Math","round","NewColor","r","g","BIT_SPACING","FilterByName","FloydSteinberg","JuNiNi","Stucci","Sierra3","Sierra2","SierraLite","PixelAt","data","p","width","length","SetPixelAt","c","ColorToChar","String","fromCharCode","useStyles","makeStyles","app","background","boxCenter","display","alignItems","flexDirection","justifyContent","imageBox","margin","padding","configBox","colorPicker","height","selectBox","minWidth","minHeight","resultBox","resultString","maxWidth","maxHeight","overflow","App","classes","canvasPreviewRef","useRef","React","useState","notifOpen","setNotifOpen","notifMsg","setNotifMsg","notifSeverity","setNotifySeverity","filterName","setFilterName","block","setBlock","surface","setSurface","stringImage","setStringImage","streched","setStreched","xy","setXY","wh","setWH","size","setSize","bgcolor","setBgcolor","imageData","setImageData","imageSrc","setImageSrc","canClipboard","setCanClipboard","useEffect","scale","min","s","console","log","navigator","permissions","query","name","then","result","state","current","canvas","ctx","getContext","filter","fillStyle","fillRect","W","H","rotate","drawImage","pixelColor","getImageData","divisor","i","GetFilterDivisor","row","col","oldColor","newColor","error","factor","rowIndex","colIndex","err","putImageData","FilterCanvas","extra","buildImageString","font","m","measureText","fillText","onDrop","useCallback","acceptedFiles","fr","FileReader","onload","img","Image","src","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","handleClose","event","reason","changePlacement","axis","value","isNaN","className","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","Alert","severity","sx","Container","Grid","container","item","md","xs","Card","CardContent","Typography","gutterBottom","variant","component","style","border","alt","ref","lg","FormControl","InputLabel","id","Select","labelId","label","onChange","target","map","MenuItem","toString","Object","keys","FormControlLabel","control","Checkbox","e","checked","FormGroup","TextField","parseInt","disabled","color","onClick","selection","window","getSelection","range","document","createRange","selectNodeContents","removeAllRanges","addRange","clipboard","writeText","execCommand","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d17eaa9f.chunk.js","sourcesContent":["interface Vector2 {\n    X: number\n    Y: number\n}\n\nconst NewVector2 = (x: number, y: number): Vector2 => ({X: x, Y: y});\nconst Vector2Mul = (a: Vector2, v: number): Vector2 => ({X: a.X * v, Y: a.Y * v})\n\nexport {\n    NewVector2,\n    Vector2Mul,\n}\n\nexport type {\n    Vector2,\n}","import {NewVector2, Vector2, Vector2Mul} from \"../image/vector\"\n\ninterface TextSurface {\n    TextureSize: Vector2\n    SurfaceSize: Vector2\n    SufaceName: string\n    FontSize: number\n}\n\ninterface TextSurfaceProvider {\n    BlockName: string\n    TextSurfaces: Array<TextSurface | null>\n}\n\n\nconst NewTextSurface = (surfaceName: string, textureSize: Vector2, surfaceSize?: Vector2, fontSize: number = 0.1): TextSurface => {\n    if (!surfaceSize) {\n        surfaceSize = textureSize\n    }\n    return {\n        TextureSize: textureSize,\n        SurfaceSize: surfaceSize,\n        SufaceName: surfaceName,\n        FontSize: fontSize,\n    }\n}\n\nconst NewTextSurfaceProvider = (blockName: string, surfaceCount: number = 1): TextSurfaceProvider => ({\n    BlockName: blockName,\n    TextSurfaces: Array(surfaceCount),\n})\n\n// Initializations from https://github.com/Whiplash141/Whips-Image-Converter/blob/develop/WhipsImageConverter/TextSurfaceProvider.cs\nconst StandardSize: Vector2 = {X: 512, Y: 512}\n\nconst Lcd = NewTextSurfaceProvider(\"LCD Panel\");\nconst WideLcd = NewTextSurfaceProvider(\"Wide LCD Panel\");\nconst LargeCornerLcd = NewTextSurfaceProvider(\"Large Corner LCD\");\nconst SmallCornerLcd = NewTextSurfaceProvider(\"Small Corner LCD\");\nconst TextPanel = NewTextSurfaceProvider(\"Text Panel\");\nconst LargeProgrammableBlock = NewTextSurfaceProvider(\"Large Programmable Block\", 2);\nconst SmallProgrammableBlock = NewTextSurfaceProvider(\"Small Programmable Block\", 2);\nconst ConsoleBlock = NewTextSurfaceProvider(\"Console Block\", 4);\nconst FighterCockpit = NewTextSurfaceProvider(\"Fighter Cockpit\", 6);\nconst LargeCockpit = NewTextSurfaceProvider(\"Large Cockpit\", 6);\nconst SmallCockpit = NewTextSurfaceProvider(\"Small Cockpit\", 4);\nconst LargeIndustrialCockpit = NewTextSurfaceProvider(\"Large Industrial Cockpit\", 6);\nconst SmallIndustrialCockpit = NewTextSurfaceProvider(\"Small Industrial Cockpit\", 5);\nconst LargeFlightSeat = NewTextSurfaceProvider(\"Flight Seat\");\nconst LargeControlStation = NewTextSurfaceProvider(\"Control Station\");\n\nLcd.TextSurfaces[0] = NewTextSurface(\"ScreenArea\", StandardSize);\nWideLcd.TextSurfaces[0] = NewTextSurface(\"ScreenArea\", NewVector2(1024, 512));\nLargeCornerLcd.TextSurfaces[0] = NewTextSurface(\"ScreenArea\", StandardSize, NewVector2(512, 86), 0.4);\nSmallCornerLcd.TextSurfaces[0] = NewTextSurface(\"ScreenArea\", StandardSize, NewVector2(512, 144), 0.2);\nTextPanel.TextSurfaces[0] = NewTextSurface(\"ScreenArea\", StandardSize, NewVector2(512, 307.2));\n\nLargeProgrammableBlock.TextSurfaces[0] = NewTextSurface(\"Large Display\", StandardSize, NewVector2(512, 320));\nLargeProgrammableBlock.TextSurfaces[1] = NewTextSurface(\"Keyboard\", StandardSize, NewVector2(512, 204.8));\n\nSmallProgrammableBlock.TextSurfaces[0] = NewTextSurface(\"Large Display\", Vector2Mul(StandardSize, 0.5));\nSmallProgrammableBlock.TextSurfaces[1] = NewTextSurface(\"Keyboard\", NewVector2(256, 128), NewVector2(256, 90.09091));\n\nConsoleBlock.TextSurfaces[0] = NewTextSurface(\"Projection Area\", NewVector2(512, 512), NewVector2(512, 512));\nConsoleBlock.TextSurfaces[1] = NewTextSurface(\"Large Display\", NewVector2(256, 256), NewVector2(256, 175));\nConsoleBlock.TextSurfaces[2] = NewTextSurface(\"Numpad\", NewVector2(128, 128), NewVector2(85.33334, 128));\nConsoleBlock.TextSurfaces[3] = NewTextSurface(\"Keyboard\", NewVector2(256, 128), NewVector2(256, 128));\n\nFighterCockpit.TextSurfaces[0] = NewTextSurface(\"Top Center Screen\", NewVector2(256, 256), NewVector2(256, 153.6));\nFighterCockpit.TextSurfaces[1] = NewTextSurface(\"Top Left Screen\", NewVector2(128, 128), NewVector2(128, 85.33334));\nFighterCockpit.TextSurfaces[2] = NewTextSurface(\"Top Right Screen\", NewVector2(128, 128), NewVector2(128, 85.33334));\nFighterCockpit.TextSurfaces[3] = NewTextSurface(\"Keyboard\", NewVector2(256, 128), NewVector2(256, 109.7143));\nFighterCockpit.TextSurfaces[4] = NewTextSurface(\"Bottom Center Screen\", NewVector2(256, 256), NewVector2(204.8, 256));\nFighterCockpit.TextSurfaces[5] = NewTextSurface(\"Numpad\", NewVector2(128, 128), NewVector2(102.4, 128));\n\nLargeCockpit.TextSurfaces[0] = NewTextSurface(\"Top Center Screen\", NewVector2(256, 256), NewVector2(256, 177.2308));\nLargeCockpit.TextSurfaces[1] = NewTextSurface(\"Top Left Screen\", NewVector2(256, 256), NewVector2(256, 192));\nLargeCockpit.TextSurfaces[2] = NewTextSurface(\"Top Right Screen\", NewVector2(256, 256), NewVector2(256, 192));\nLargeCockpit.TextSurfaces[3] = NewTextSurface(\"Keyboard\", NewVector2(256, 256), NewVector2(256, 146.2857));\nLargeCockpit.TextSurfaces[4] = NewTextSurface(\"Bottom Left Screen\", NewVector2(256, 256), NewVector2(256, 199.1111));\nLargeCockpit.TextSurfaces[5] = NewTextSurface(\"Bottom Right Screen\", NewVector2(256, 256), NewVector2(256, 199.1111));\n\nSmallCockpit.TextSurfaces[0] = NewTextSurface(\"Top Center Screen\", NewVector2(256, 256), NewVector2(256, 256));\nSmallCockpit.TextSurfaces[1] = NewTextSurface(\"Top Left Screen\", NewVector2(256, 256), NewVector2(256, 192));\nSmallCockpit.TextSurfaces[2] = NewTextSurface(\"Top Right Screen\", NewVector2(256, 256), NewVector2(256, 192));\nSmallCockpit.TextSurfaces[3] = NewTextSurface(\"Keyboard\", NewVector2(256, 256), NewVector2(256, 139.6364));\n\nLargeIndustrialCockpit.TextSurfaces[0] = NewTextSurface(\"Large Display\", NewVector2(256, 256), NewVector2(256, 153.6));\nLargeIndustrialCockpit.TextSurfaces[1] = NewTextSurface(\"Top Left Screen\", NewVector2(256, 256), NewVector2(256, 179.2));\nLargeIndustrialCockpit.TextSurfaces[2] = NewTextSurface(\"Top Center Screen\", NewVector2(256, 256), NewVector2(256, 179.2));\nLargeIndustrialCockpit.TextSurfaces[3] = NewTextSurface(\"Top Right Screen\", NewVector2(256, 256), NewVector2(256, 153.6));\nLargeIndustrialCockpit.TextSurfaces[4] = NewTextSurface(\"Keyboard\", NewVector2(256, 256), NewVector2(256, 153.6));\nLargeIndustrialCockpit.TextSurfaces[5] = NewTextSurface(\"Numpad\", NewVector2(256, 256), NewVector2(204.8, 256));\n\nSmallIndustrialCockpit.TextSurfaces[0] = NewTextSurface(\"Top Left Screen\", NewVector2(256, 256), NewVector2(256, 182.8571));\nSmallIndustrialCockpit.TextSurfaces[1] = NewTextSurface(\"Top Center Screen\", NewVector2(256, 256), NewVector2(256, 170.6667));\nSmallIndustrialCockpit.TextSurfaces[2] = NewTextSurface(\"Top Right Screen\", NewVector2(256, 256), NewVector2(256, 182.8571));\nSmallIndustrialCockpit.TextSurfaces[3] = NewTextSurface(\"Keyboard\", NewVector2(256, 128), NewVector2(256, 128));\nSmallIndustrialCockpit.TextSurfaces[4] = NewTextSurface(\"Numpad\", NewVector2(128, 128), NewVector2(106.6667, 128));\n\nLargeFlightSeat.TextSurfaces[0] = NewTextSurface(\"Large Display\", NewVector2(512, 128), NewVector2(512, 113.7778));\nLargeControlStation.TextSurfaces[0] = NewTextSurface(\"Large Display\", NewVector2(512, 512), NewVector2(512, 307.2));\n\nconst TextSurfaceProviders: Array<TextSurfaceProvider> = [\n    Lcd,\n    WideLcd,\n    LargeCornerLcd,\n    SmallCornerLcd,\n    TextPanel,\n    LargeProgrammableBlock,\n    SmallProgrammableBlock,\n    ConsoleBlock,\n    FighterCockpit,\n    LargeCockpit,\n    SmallCockpit,\n    LargeIndustrialCockpit,\n    SmallIndustrialCockpit,\n    LargeFlightSeat,\n    LargeControlStation,\n]\n\nconst ProviderByName : {[key: string]:TextSurfaceProvider} = {}\n\nTextSurfaceProviders.forEach((provider) => ProviderByName[provider.BlockName] = provider)\n\nexport {\n    StandardSize,\n    Lcd,\n    WideLcd,\n    LargeCornerLcd,\n    SmallCornerLcd,\n    TextPanel,\n    LargeProgrammableBlock,\n    SmallProgrammableBlock,\n    ConsoleBlock,\n    FighterCockpit,\n    LargeCockpit,\n    SmallCockpit,\n    LargeIndustrialCockpit,\n    SmallIndustrialCockpit,\n    LargeFlightSeat,\n    LargeControlStation,\n    TextSurfaceProviders,\n    ProviderByName,\n}\n\nexport type {\n    TextSurface,\n    TextSurfaceProvider,\n}","// Based on https://github.com/Whiplash141/Whips-Image-Converter/blob/develop/WhipsImageConverter/Color3.cs\n\nconst ColorAdd = (a: Color, b: Color): Color => ({R: a.R + b.R, G: a.G + b.G, B: a.B + b.B, A: a.A})\nconst ColorSub = (a: Color, b: Color): Color => ({R: a.R - b.R, G: a.G - b.G, B: a.B - b.B, A: a.A})\nconst ColorMul = (a: Color, b: number): Color => ({\n    R: Math.round(a.R * b),\n    G: Math.round(a.G * b),\n    B: Math.round(a.B * b),\n    A: a.A\n})\nconst ColorDiv = (a: Color, b: number): Color => ColorMul(a, 1.0 / b)\n\nconst NewColor = (r: number, g: number, b: number, a: number): Color => ({R: r, G: g, B: b, A: a})\n\nexport {\n    ColorAdd,\n    ColorSub,\n    ColorMul,\n    ColorDiv,\n    NewColor,\n}","const fakeTransparency = '#'\nconst PIXELS_TO_CHARACTERS = 1 / 2.88;\nconst BIT_SPACING = 255.0 / 7.0;\n\nexport {\n    fakeTransparency,\n    PIXELS_TO_CHARACTERS,\n    BIT_SPACING,\n}","const FloydSteinberg = [\n    [7, 0, 1],\n    [1, 1, 1],\n    [5, 1, 0],\n    [3, 1, -1]\n]\n\nconst JuNiNi = [\n    [7, 0, 1],\n    [5, 0, 2],\n    [3, 1, -2],\n    [5, 1, -1],\n    [7, 1, 0],\n    [5, 1, 1],\n    [3, 1, 2],\n    [1, 2, -2],\n    [3, 2, -1],\n    [5, 2, 0],\n    [3, 2, 1],\n    [1, 2, 2]\n]\n\nconst Stucci = [\n    [8, 0, 1],\n    [4, 0, 2],\n    [2, 1, -2],\n    [4, 1, -1],\n    [8, 1, 0],\n    [4, 1, 1],\n    [2, 1, 2],\n    [1, 2, -2],\n    [2, 2, -1],\n    [4, 2, 0],\n    [2, 2, 1],\n    [1, 2, 2]\n]\n\nconst Sierra3 = [\n    [5, 0, 1],\n    [3, 0, 2],\n    [2, 1, -2],\n    [4, 1, -1],\n    [5, 1, 0],\n    [4, 1, 1],\n    [2, 1, 2],\n    [2, 2, -1],\n    [3, 2, 0],\n    [2, 2, 1]\n]\n\nconst Sierra2 = [\n    [4, 0, 1],\n    [3, 0, 2],\n    [1, 1, -2],\n    [2, 1, -1],\n    [3, 1, 0],\n    [2, 1, 1],\n    [1, 1, 2]\n]\n\nconst SierraLite = [\n    [2, 0, 1],\n    [1, 1, -1],\n    [1, 1, 0],\n]\n\nconst GetFilterDivisor = (filter: Array<Array<number>>): number => {\n    let divisor = 0;\n    for (let i = 0; i < filter[0].length; i++) {\n        divisor += filter[i][0]\n    }\n\n    return divisor;\n}\n\nconst FilterByName: { [key: string]: Array<Array<number>> } = {\n    FloydSteinberg,\n    JuNiNi,\n    Stucci,\n    Sierra3,\n    Sierra2,\n    SierraLite,\n}\n\nexport {\n    FloydSteinberg,\n    JuNiNi,\n    Stucci,\n    Sierra3,\n    Sierra2,\n    SierraLite,\n    GetFilterDivisor,\n    FilterByName,\n}\n","import {ColorAdd, ColorMul, ColorSub, NewColor} from \"../image/color3\";\nimport {BIT_SPACING, fakeTransparency} from \"./constants\";\nimport {GetFilterDivisor} from \"../image/dither\";\n\nconst GetClosestColor = (pixelColor: Color): Color => NewColor(\n    Math.round(pixelColor.R / BIT_SPACING) * BIT_SPACING,\n    Math.round(pixelColor.G / BIT_SPACING) * BIT_SPACING,\n    Math.round(pixelColor.B / BIT_SPACING) * BIT_SPACING,\n    pixelColor.A);\n\nconst PixelAt = (data: ImageData, x: number, y: number): Color => {\n    const p = 4 * (y * data.width + x) // RGBA\n    if (p >= data.data.length - 4) {\n        return NewColor(0, 0, 0, 0)\n    }\n    return NewColor(data.data[p], data.data[p + 1], data.data[p + 2], data.data[p + 3])\n}\n\nconst SetPixelAt = (data: ImageData, x: number, y: number, c: Color) => {\n    const p = 4 * (y * data.width + x) // RGBA\n    if (p >= data.data.length - 4) {\n        return NewColor(0, 0, 0, 0)\n    }\n\n    data.data[p] = c.R\n    data.data[p + 1] = c.G\n    data.data[p + 2] = c.B\n    data.data[p + 3] = c.A\n}\n\nconst FilterCanvas = (canvas: HTMLCanvasElement, filter: Array<Array<number>>, bgcolor?: Color) => {\n    if (!bgcolor) {\n        bgcolor = NewColor(0, 0, 0, 255)\n    }\n\n    const ctx = canvas.getContext(\"2d\")!;\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n    const { width, height } = canvas;\n    const divisor = GetFilterDivisor(filter)\n\n    for (let row = 0; row < width; row++) {\n        for (let col = 0; col < height; col++) {\n            const oldColor = PixelAt(imageData, row, col)\n            const newColor = GetClosestColor(oldColor)\n            let error = ColorSub(oldColor, newColor)\n\n            if (oldColor.A < 36) {\n                SetPixelAt(imageData, row, col, bgcolor)\n                error = bgcolor\n            } else {\n                SetPixelAt(imageData, row, col, newColor)\n            }\n\n            for (let i = 0; i < filter[0].length; i++) {\n                const factor = filter[i][0] / divisor; //factor\n                const rowIndex = filter[i][1] + row; //adjusted row\n                const colIndex = filter[i][2] + col; //adjusted column\n                const c = PixelAt(imageData, rowIndex, colIndex)\n                const err = ColorMul(error, factor)\n                SetPixelAt(imageData, rowIndex, colIndex, ColorAdd(c, err))\n            }\n        }\n    }\n\n    ctx.putImageData(imageData, 0, 0)\n}\n\nconst ColorToChar = (r: number, g: number, b: number) : string => {\n    const c = (Math.round(r / BIT_SPACING) << 6) + (Math.round(g / BIT_SPACING) << 3) + (Math.round(b / BIT_SPACING));\n    return String.fromCharCode(0xe100 + c)\n}\n\nconst buildImageString = (canvas: HTMLCanvasElement, extra?: string) : string => {\n    let result = \"\"\n    const ctx = canvas.getContext(\"2d\")!;\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n    const width = imageData.width;\n    const height = imageData.height;\n\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            const c = PixelAt(imageData, row, col)\n            const colorChar = (c.A >= 36) ? ColorToChar(c.R, c.G, c.B) : fakeTransparency;\n            result += colorChar\n        }\n\n        if (row + 1 < height) {\n            result += \"\\n\"\n        }\n    }\n    // Add Comment at end\n    result += `SEI${extra}`\n    return result\n}\n\nexport {\n    GetClosestColor,\n    FilterCanvas,\n    buildImageString,\n}","import React, {SyntheticEvent, useCallback, useEffect, useRef, useState} from 'react';\nimport {useDropzone} from \"react-dropzone\";\nimport {\n    Lcd,\n    ProviderByName,\n    StandardSize,\n    TextSurface,\n    TextSurfaceProvider,\n    TextSurfaceProviders\n} from \"./spaceengineers/surface\";\nimport {NewVector2, Vector2, Vector2Mul} from \"./image/vector\";\nimport {buildImageString, FilterCanvas} from \"./spaceengineers/process\";\nimport {FilterByName} from \"./image/dither\";\nimport {PIXELS_TO_CHARACTERS} from \"./spaceengineers/constants\";\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Alert,\n    AlertColor,\n    Card,\n    CardContent, Checkbox, Container, FormControl, FormControlLabel, FormGroup,\n    Grid, InputLabel, MenuItem, Select, SelectChangeEvent,\n    Snackbar,\n    SnackbarCloseReason, TextField,\n    Typography\n} from \"@mui/material\";\nimport {HexColorPicker} from \"react-colorful\";\n\nconst useStyles = makeStyles({\n    app: {\n        background: '#555555',\n    },\n    boxCenter: {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    imageBox: {\n        // maxWidth: 320,\n        margin: '5px',\n        padding: '10px'\n    },\n    configBox: {\n        // maxWidth: 380,\n        margin: '5px',\n        padding: '10px'\n    },\n    colorPicker: {\n        width: '100px !important',\n        height: '100px !important',\n    },\n    selectBox: {\n        minWidth: 256,\n        minHeight: 256,\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    resultBox: {\n        margin: '5px',\n        padding: '10px'\n    },\n    resultString: {\n        maxWidth: 256,\n        maxHeight: 200,\n        overflow: 'hidden'\n    }\n})\n\nfunction App() {\n    const classes = useStyles();\n    const canvasPreviewRef = useRef<HTMLCanvasElement>(null)\n\n    // Notification\n    const [notifOpen, setNotifOpen] = React.useState<boolean>(false);\n    const [notifMsg, setNotifMsg] = React.useState<string>(\"\")\n    const [notifSeverity, setNotifySeverity] = React.useState<AlertColor>(\"success\")\n\n    // Dither Settings\n    const [filterName, setFilterName] = useState<string>('FloydSteinberg')\n\n    // Space Engineers\n    const [block, setBlock] = useState<TextSurfaceProvider>(Lcd); // Current Block Type\n    const [surface, setSurface] = useState<TextSurface>(block.TextSurfaces[0]!) // Current Block Surface\n    const [stringImage, setStringImage] = useState<string>(\"\")\n    const [streched, setStreched] = useState<boolean>(false) // Framed image\n    const [xy, setXY] = useState<Vector2>(NewVector2(0, 0))\n    const [wh, setWH] = useState<Vector2>(NewVector2(0, 0))\n    const [size, setSize] = useState<Vector2>(NewVector2(0, 0)) // Output size\n    const [bgcolor, setBgcolor] = useState<string>('#000000') // Background Color\n\n    // Loaded Image\n    const [imageData, setImageData] = useState<HTMLImageElement | null>(null); // Current image data\n    const [imageSrc, setImageSrc] = useState<string>(\"\");\n\n    // Clipboard\n    const [canClipboard, setCanClipboard] = useState<boolean>(false);\n\n    // When update surface, update base size\n    useEffect(() => {\n        const scale = StandardSize.X / Math.min(surface.TextureSize.X, surface.TextureSize.Y)\n        const s = Vector2Mul(surface.SurfaceSize, PIXELS_TO_CHARACTERS * scale);\n        s.X = Math.round(s.X)\n        s.Y = Math.round(s.Y)\n        setSize(s)\n        if (wh.X === 0 || wh.Y === 0) {\n            setXY(NewVector2(0, 0))\n            setWH(s)\n        }\n        console.log(`Updated size to ${s.X} : ${s.Y}`)\n    }, [wh, surface])\n\n    // Get clipboard permissions if possible\n    useEffect(() => {\n        // @ts-ignore\n        navigator.permissions.query({name: \"clipboard-write\"}).then(result => {\n            setCanClipboard(result.state === \"granted\" || result.state === \"prompt\")\n            console.log(`Clipboard grant: ${result.state === \"granted\" || result.state === \"prompt\"}`)\n        });\n    })\n\n    // Select all pre content and put in clipboard\n    const selectAll = (e: any) => {\n        const selection = window.getSelection()!;\n        const range = document.createRange();\n        range.selectNodeContents(e.target);\n        selection.removeAllRanges();\n        selection.addRange(range);\n        if (canClipboard) {\n            navigator.clipboard.writeText(stringImage).then(() => {\n            })\n        } else {\n            document.execCommand('copy');\n        }\n        setNotifMsg('copied to clipboard')\n        setNotifOpen(true)\n    }\n\n    // Update Canvas\n    useEffect(() => {\n        if (!canvasPreviewRef.current) {\n            return\n        }\n        const canvas = canvasPreviewRef.current\n        const ctx = canvas.getContext('2d')!\n        const filter = FilterByName[filterName];\n        const {width, height} = canvas;\n\n        if (imageData) {\n            //Our first draw\n            ctx.fillStyle = bgcolor\n            ctx.fillRect(0, 0, width, height)\n            let {X, Y} = xy;\n            let {X: W, Y: H} = wh;\n\n            if (streched) {\n                X = 0\n                Y = 0\n                W = width\n                H = height\n            }\n            // ctx.translate(W, 0);\n            ctx.scale(-1, 1);\n            ctx.rotate(3.14/2);\n            ctx.drawImage(imageData, X, Y, W, H);\n            FilterCanvas(canvas, filter)\n            setStringImage(buildImageString(canvas, `Size: ${width}x${height} - from Teske's Lab & Whiplash141`))\n        } else {\n            ctx.fillStyle = '#FFFFFF'\n            ctx.fillRect(0, 0, width, height)\n            ctx.fillStyle = '#333333'\n            ctx.font = \"15px Arial\";\n            const m = ctx.measureText('Load an image')\n            ctx.fillText(\"Load an image\", (width - m.width) / 2, (height - 15) / 2);\n        }\n    }, [filterName, bgcolor, streched, xy, wh, imageData, size])\n\n    // Image Drop\n    const onDrop = useCallback(acceptedFiles => {\n        if (acceptedFiles.length === 1) {\n            console.log(`Loading image ${acceptedFiles[0]}`)\n            const fr = new FileReader();\n            fr.onload = function () {\n                const img = new Image();\n                img.src = fr.result as string;\n                setImageSrc(fr.result as string)\n                img.onload = () => setImageData(img)\n                setNotifySeverity(\"success\")\n                setNotifMsg(\"Loaded image\")\n                setNotifOpen(true)\n            }\n            fr.readAsDataURL(acceptedFiles[0]);\n        } else {\n            setNotifMsg(\"Please select a single image\")\n            setNotifySeverity(\"error\")\n            setNotifOpen(true)\n        }\n    }, [])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    const handleClose = (event: SyntheticEvent, reason?: SnackbarCloseReason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setNotifOpen(false);\n    };\n\n    const changeProvider = (event: SelectChangeEvent) => {\n        console.log(`Changing block to ${event.target.value}`)\n        const provider = ProviderByName[event.target.value]\n        if (provider) {\n            setBlock(provider)\n            setSurface(provider.TextSurfaces[0]!)\n        }\n    }\n\n    const changeSurface = (event: SelectChangeEvent) => {\n        block.TextSurfaces.forEach((surface) => {\n            if (surface?.SufaceName === event.target.value) {\n                setSurface(surface)\n            }\n        })\n    }\n\n    const changeFilter = (event: SelectChangeEvent) => {\n        setFilterName(event.target.value.toString())\n    }\n\n    const stretchedChange = (e: React.SyntheticEvent, checked: boolean) => {\n        setStreched(checked)\n    }\n\n    const changePlacement = (axis: string, value: number) => {\n        if (isNaN(value)) {\n            return\n        }\n        switch (axis) {\n            case 'x':\n                setXY(NewVector2(value, xy.Y))\n                break\n            case 'y':\n                setXY(NewVector2(xy.X, value))\n                break\n            case 'w':\n                setWH(NewVector2(value, wh.Y))\n                break\n            case 'h':\n                setWH(NewVector2(wh.Y, value))\n                break\n        }\n    }\n\n    return (\n        <div className={classes.app}>\n            <Snackbar\n                anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n                open={notifOpen}\n                autoHideDuration={2000}\n                onClose={handleClose}\n            >\n                <Alert onClose={handleClose} severity={notifSeverity} sx={{width: '100%'}}>\n                    {notifMsg}\n                </Alert>\n            </Snackbar>\n            <Container>\n                <Grid container>\n                    <Grid item md={2}/>\n                    <Grid item xs={12} md={4}>\n                        <Card className={classes.imageBox}>\n                            <CardContent>\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">Original Image</Typography>\n                            </CardContent>\n                            <div {...getRootProps()} className={classes.selectBox}\n                                 style={{border: isDragActive ? '2px dashed green' : '2px dashed grey'}}>\n                                {imageSrc !== \"\" ?\n                                    <div><input {...getInputProps()} /><img alt=\"original\" src={imageSrc} style={{maxHeight: 160, maxWidth: 160}}/></div> :\n                                    <div><input {...getInputProps()} /><p>Drop the image here or click to load</p></div>\n                                }\n                            </div>\n                        </Card>\n                        <Card className={classes.imageBox}>\n                            <CardContent>\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">Preview</Typography>\n                            </CardContent>\n                            <div className={classes.selectBox}>\n                                <canvas ref={canvasPreviewRef} width={size.X} height={size.Y}/>\n                            </div>\n                        </Card>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <Card className={classes.configBox}>\n                            <CardContent>\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">Configuration</Typography>\n                            </CardContent>\n                            <Grid container>\n                                <Grid item xs={12} lg={6}>\n                                    <div className={classes.selectBox}>\n                                        <FormControl sx={{m: 1, minWidth: 200}}>\n                                            <InputLabel id=\"block-label\">Block</InputLabel>\n                                            <Select\n                                                labelId=\"block-label\"\n                                                id=\"block-selector\"\n                                                value={block.BlockName}\n                                                label=\"Block Type\"\n                                                onChange={changeProvider}\n                                            >\n                                                {\n                                                    TextSurfaceProviders.map(provider => <MenuItem\n                                                        value={provider.BlockName}>{provider.BlockName}</MenuItem>)\n                                                }\n                                            </Select>\n                                        </FormControl>\n                                        <FormControl sx={{m: 1, minWidth: 200}}>\n                                            <InputLabel id=\"surface-label\">Surface</InputLabel>\n                                            <Select\n                                                labelId=\"surface-label\"\n                                                id=\"surface-selector\"\n                                                value={surface.SufaceName}\n                                                label=\"Surface\"\n                                                onChange={changeSurface}\n                                            >\n                                                {\n                                                    block.TextSurfaces.map((surface) => <MenuItem\n                                                        value={surface!.SufaceName}>{surface!.SufaceName}</MenuItem>)\n                                                }\n                                            </Select>\n                                        </FormControl>\n                                        <FormControl sx={{m: 1, minWidth: 200}}>\n                                            <InputLabel id=\"filter-label\">Dither Filter</InputLabel>\n                                            <Select\n                                                labelId=\"filter-label\"\n                                                id=\"filter-selector\"\n                                                value={filterName}\n                                                label=\"Dither Filter\"\n                                                onChange={changeFilter}\n                                            >\n                                                {\n                                                    Object.keys(FilterByName).map((name) => <MenuItem\n                                                        value={name}>{name}</MenuItem>)\n                                                }\n                                            </Select>\n                                        </FormControl>\n                                    </div>\n                                </Grid>\n                                <Grid item xs={12} lg={6}>\n                                    <FormControl sx={{m: 1, minWidth: 200}}>\n                                        <FormControlLabel control={<Checkbox/>} onChange={stretchedChange}\n                                                          label=\"Stretch\"/>\n                                    </FormControl>\n                                    <FormGroup>\n                                        <Grid container>\n                                            <Grid item xs={3}><TextField\n                                                onChange={(e) => changePlacement('x', parseInt(e.target.value))}\n                                                value={xy.X} disabled={streched} label=\"X\" variant=\"outlined\"/></Grid>\n                                            <Grid item xs={3}><TextField\n                                                onChange={(e) => changePlacement('y', parseInt(e.target.value))}\n                                                value={xy.Y} disabled={streched} label=\"Y\" variant=\"outlined\"/></Grid>\n                                            <Grid item xs={3}> <TextField\n                                                onChange={(e) => changePlacement('w', parseInt(e.target.value))}\n                                                value={wh.X} disabled={streched} label=\"W\" variant=\"outlined\"/></Grid>\n                                            <Grid item xs={3}><TextField\n                                                onChange={(e) => changePlacement('h', parseInt(e.target.value))}\n                                                value={wh.Y} disabled={streched} label=\"H\" variant=\"outlined\"/></Grid>\n                                        </Grid>\n                                    </FormGroup>\n                                    {!streched ?\n                                        <div className={classes.boxCenter}>\n                                            <Typography gutterBottom variant=\"h5\" component=\"div\">Background\n                                                Color</Typography>\n                                            <HexColorPicker className={classes.colorPicker} color={bgcolor}\n                                                            onChange={setBgcolor}/>\n                                        </div> : <div/>\n                                    }\n                                </Grid>\n                            </Grid>\n                        </Card>\n                        <Card className={classes.resultBox}>\n                            <CardContent>\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">Result Text</Typography>\n                            </CardContent>\n                            <div className={classes.selectBox}>\n                                <Typography variant=\"body2\" color=\"text.secondary\">\n                                    {stringImage !== \"\" ? 'Click below to copy' : 'Waiting for image'}\n                                </Typography>\n                                <div className={classes.resultString}>\n                                    <pre onClick={selectAll}>\n                                        {stringImage}\n                                    </pre>\n                                </div>\n                            </div>\n                        </Card>\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}